# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .account import AccountParams
    from .address import AddressParams
    from .circle import CircleParams
    from .country import CountryParams
    from .document_path import DocumentPathParams
    from .extensive import ExtensiveParams
    from .project import ProjectParams
    from .shape import ShapeParams, Shape_CircleParams, Shape_SquareParams, Shape_TriangleParams
    from .square import SquareParams
    from .triangle import TriangleParams
_dynamic_imports: typing.Dict[str, str] = {
    "AccountParams": ".account",
    "AddressParams": ".address",
    "CircleParams": ".circle",
    "CountryParams": ".country",
    "DocumentPathParams": ".document_path",
    "ExtensiveParams": ".extensive",
    "ProjectParams": ".project",
    "ShapeParams": ".shape",
    "Shape_CircleParams": ".shape",
    "Shape_SquareParams": ".shape",
    "Shape_TriangleParams": ".shape",
    "SquareParams": ".square",
    "TriangleParams": ".triangle",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AccountParams",
    "AddressParams",
    "CircleParams",
    "CountryParams",
    "DocumentPathParams",
    "ExtensiveParams",
    "ProjectParams",
    "ShapeParams",
    "Shape_CircleParams",
    "Shape_SquareParams",
    "Shape_TriangleParams",
    "SquareParams",
    "TriangleParams",
]
