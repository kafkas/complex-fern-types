# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .account import Account
    from .address import Address
    from .bad_literal_1 import BadLiteral1
    from .bad_literal_2 import BadLiteral2
    from .bad_literal_3 import BadLiteral3
    from .bad_literal_4 import BadLiteral4
    from .bad_literal_5 import BadLiteral5
    from .bad_literal_6 import BadLiteral6
    from .bad_literal_7 import BadLiteral7
    from .bad_literal_8 import BadLiteral8
    from .circle import Circle
    from .country import Country
    from .document_path import DocumentPath
    from .emerald_color import EmeraldColor
    from .enum_with_bad_values import EnumWithBadValues
    from .extensive import Extensive
    from .green_color import GreenColor
    from .is_open import IsOpen
    from .project import Project
    from .shape import Shape, Shape_Circle, Shape_Square, Shape_Triangle
    from .square import Square
    from .triangle import Triangle
_dynamic_imports: typing.Dict[str, str] = {
    "Account": ".account",
    "Address": ".address",
    "BadLiteral1": ".bad_literal_1",
    "BadLiteral2": ".bad_literal_2",
    "BadLiteral3": ".bad_literal_3",
    "BadLiteral4": ".bad_literal_4",
    "BadLiteral5": ".bad_literal_5",
    "BadLiteral6": ".bad_literal_6",
    "BadLiteral7": ".bad_literal_7",
    "BadLiteral8": ".bad_literal_8",
    "Circle": ".circle",
    "Country": ".country",
    "DocumentPath": ".document_path",
    "EmeraldColor": ".emerald_color",
    "EnumWithBadValues": ".enum_with_bad_values",
    "Extensive": ".extensive",
    "GreenColor": ".green_color",
    "IsOpen": ".is_open",
    "Project": ".project",
    "Shape": ".shape",
    "Shape_Circle": ".shape",
    "Shape_Square": ".shape",
    "Shape_Triangle": ".shape",
    "Square": ".square",
    "Triangle": ".triangle",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Account",
    "Address",
    "BadLiteral1",
    "BadLiteral2",
    "BadLiteral3",
    "BadLiteral4",
    "BadLiteral5",
    "BadLiteral6",
    "BadLiteral7",
    "BadLiteral8",
    "Circle",
    "Country",
    "DocumentPath",
    "EmeraldColor",
    "EnumWithBadValues",
    "Extensive",
    "GreenColor",
    "IsOpen",
    "Project",
    "Shape",
    "Shape_Circle",
    "Shape_Square",
    "Shape_Triangle",
    "Square",
    "Triangle",
]
