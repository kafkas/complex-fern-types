# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        Account,
        AccountParams,
        Address,
        AddressParams,
        BadLiteral1,
        BadLiteral2,
        BadLiteral3,
        BadLiteral4,
        BadLiteral5,
        BadLiteral6,
        BadLiteral7,
        BadLiteral8,
        Circle,
        CircleParams,
        Country,
        CountryParams,
        DocumentPath,
        DocumentPathParams,
        EmeraldColor,
        EnumWithBadValues,
        Extensive,
        ExtensiveParams,
        GreenColor,
        IsOpen,
        Project,
        ProjectParams,
        Shape,
        ShapeParams,
        Shape_Circle,
        Shape_CircleParams,
        Shape_Square,
        Shape_SquareParams,
        Shape_Triangle,
        Shape_TriangleParams,
        Square,
        SquareParams,
        Triangle,
        TriangleParams,
    )
    from . import service, types
    from .client import AsyncSeedApi, SeedApi
    from .version import __version__
_dynamic_imports: typing.Dict[str, str] = {
    "Account": ".types",
    "AccountParams": ".types",
    "Address": ".types",
    "AddressParams": ".types",
    "AsyncSeedApi": ".client",
    "BadLiteral1": ".types",
    "BadLiteral2": ".types",
    "BadLiteral3": ".types",
    "BadLiteral4": ".types",
    "BadLiteral5": ".types",
    "BadLiteral6": ".types",
    "BadLiteral7": ".types",
    "BadLiteral8": ".types",
    "Circle": ".types",
    "CircleParams": ".types",
    "Country": ".types",
    "CountryParams": ".types",
    "DocumentPath": ".types",
    "DocumentPathParams": ".types",
    "EmeraldColor": ".types",
    "EnumWithBadValues": ".types",
    "Extensive": ".types",
    "ExtensiveParams": ".types",
    "GreenColor": ".types",
    "IsOpen": ".types",
    "Project": ".types",
    "ProjectParams": ".types",
    "SeedApi": ".client",
    "Shape": ".types",
    "ShapeParams": ".types",
    "Shape_Circle": ".types",
    "Shape_CircleParams": ".types",
    "Shape_Square": ".types",
    "Shape_SquareParams": ".types",
    "Shape_Triangle": ".types",
    "Shape_TriangleParams": ".types",
    "Square": ".types",
    "SquareParams": ".types",
    "Triangle": ".types",
    "TriangleParams": ".types",
    "__version__": ".version",
    "service": ".",
    "types": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Account",
    "AccountParams",
    "Address",
    "AddressParams",
    "AsyncSeedApi",
    "BadLiteral1",
    "BadLiteral2",
    "BadLiteral3",
    "BadLiteral4",
    "BadLiteral5",
    "BadLiteral6",
    "BadLiteral7",
    "BadLiteral8",
    "Circle",
    "CircleParams",
    "Country",
    "CountryParams",
    "DocumentPath",
    "DocumentPathParams",
    "EmeraldColor",
    "EnumWithBadValues",
    "Extensive",
    "ExtensiveParams",
    "GreenColor",
    "IsOpen",
    "Project",
    "ProjectParams",
    "SeedApi",
    "Shape",
    "ShapeParams",
    "Shape_Circle",
    "Shape_CircleParams",
    "Shape_Square",
    "Shape_SquareParams",
    "Shape_Triangle",
    "Shape_TriangleParams",
    "Square",
    "SquareParams",
    "Triangle",
    "TriangleParams",
    "__version__",
    "service",
    "types",
]
