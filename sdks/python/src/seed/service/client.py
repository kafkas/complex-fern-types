# This file was auto-generated by Fern from our API Definition.

import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawServiceClient, RawServiceClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def simple(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedApi

        client = SeedApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.simple()
        """
        _response = self._raw_client.simple(request_options=request_options)
        return _response.data

    def download_file(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Iterator[bytes]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.Iterator[bytes]
        """
        with self._raw_client.download_file(request_options=request_options) as r:
            yield from r.data

    def upload_file(
        self,
        *,
        request: typing.Union[bytes, typing.Iterator[bytes], typing.AsyncIterator[bytes]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Parameters
        ----------
        request : typing.Union[bytes, typing.Iterator[bytes], typing.AsyncIterator[bytes]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
        """
        _response = self._raw_client.upload_file(request=request, request_options=request_options)
        return _response.data

    def upload_single_document(
        self, *, document_file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        document_file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = self._raw_client.upload_single_document(
            document_file=document_file, request_options=request_options
        )
        return _response.data

    def upload_list_of_documents(
        self,
        *,
        document_file_1: core.File,
        document_file_2: core.File,
        document_files: typing.List[core.File],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        document_file_1 : core.File
            See core.File for more documentation

        document_file_2 : core.File
            See core.File for more documentation

        document_files : typing.List[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = self._raw_client.upload_list_of_documents(
            document_file_1=document_file_1,
            document_file_2=document_file_2,
            document_files=document_files,
            request_options=request_options,
        )
        return _response.data

    def upload_multiple_documents_and_fields(
        self,
        *,
        document_file_1: core.File,
        document_file_2: core.File,
        document_files: typing.List[core.File],
        some_string: str,
        some_integer: int,
        some_boolean: bool,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        document_file_1 : core.File
            See core.File for more documentation

        document_file_2 : core.File
            See core.File for more documentation

        document_files : typing.List[core.File]
            See core.File for more documentation

        some_string : str

        some_integer : int

        some_boolean : bool

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = self._raw_client.upload_multiple_documents_and_fields(
            document_file_1=document_file_1,
            document_file_2=document_file_2,
            document_files=document_files,
            some_string=some_string,
            some_integer=some_integer,
            some_boolean=some_boolean,
            request_options=request_options,
        )
        return _response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def simple(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from seed import AsyncSeedApi

        client = AsyncSeedApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.simple()


        asyncio.run(main())
        """
        _response = await self._raw_client.simple(request_options=request_options)
        return _response.data

    async def download_file(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.AsyncIterator[bytes]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.AsyncIterator[bytes]
        """
        async with self._raw_client.download_file(request_options=request_options) as r:
            async for _chunk in r.data:
                yield _chunk

    async def upload_file(
        self,
        *,
        request: typing.Union[bytes, typing.Iterator[bytes], typing.AsyncIterator[bytes]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Parameters
        ----------
        request : typing.Union[bytes, typing.Iterator[bytes], typing.AsyncIterator[bytes]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
        """
        _response = await self._raw_client.upload_file(request=request, request_options=request_options)
        return _response.data

    async def upload_single_document(
        self, *, document_file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        document_file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = await self._raw_client.upload_single_document(
            document_file=document_file, request_options=request_options
        )
        return _response.data

    async def upload_list_of_documents(
        self,
        *,
        document_file_1: core.File,
        document_file_2: core.File,
        document_files: typing.List[core.File],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        document_file_1 : core.File
            See core.File for more documentation

        document_file_2 : core.File
            See core.File for more documentation

        document_files : typing.List[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = await self._raw_client.upload_list_of_documents(
            document_file_1=document_file_1,
            document_file_2=document_file_2,
            document_files=document_files,
            request_options=request_options,
        )
        return _response.data

    async def upload_multiple_documents_and_fields(
        self,
        *,
        document_file_1: core.File,
        document_file_2: core.File,
        document_files: typing.List[core.File],
        some_string: str,
        some_integer: int,
        some_boolean: bool,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        document_file_1 : core.File
            See core.File for more documentation

        document_file_2 : core.File
            See core.File for more documentation

        document_files : typing.List[core.File]
            See core.File for more documentation

        some_string : str

        some_integer : int

        some_boolean : bool

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = await self._raw_client.upload_multiple_documents_and_fields(
            document_file_1=document_file_1,
            document_file_2=document_file_2,
            document_files=document_files,
            some_string=some_string,
            some_integer=some_integer,
            some_boolean=some_boolean,
            request_options=request_options,
        )
        return _response.data
